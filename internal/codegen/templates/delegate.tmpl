/*
#include <stdint.h>

// Note: these functions have a different signature but because they are only
// used as function pointers (and never called) and because they use C name
// mangling, the signature doesn't really matter.
void winrt_{{.Name}}_Invoke(void);
void winrt_{{.Name}}_QueryInterface(void);
uint64_t winrt_{{.Name}}_AddRef(void);
uint64_t winrt_{{.Name}}_Release(void);

// The Vtable structure for WinRT {{.Name}} interfaces.
typedef struct {
	void *QueryInterface;
	void *AddRef;
	void *Release;
	void *Invoke;
} {{.Name}}Vtbl_t;

// The Vtable itself. It can be kept constant.
static const {{.Name}}Vtbl_t winrt_{{.Name}}Vtbl = {
	(void*)winrt_{{.Name}}_QueryInterface,
	(void*)winrt_{{.Name}}_AddRef,
	(void*)winrt_{{.Name}}_Release,
	(void*)winrt_{{.Name}}_Invoke,
};

// A small helper function to get the Vtable.
const {{.Name}}Vtbl_t * winrt_get{{.Name}}Vtbl(void) {
	return &winrt_{{.Name}}Vtbl;
}
*/
import "C"

const GUID{{.Name}} string = "{{.GUID}}"
const Signature{{.Name}} string = "{{.Signature}}"

type {{.Name}} struct {
	ole.IUnknown
	sync.Mutex
	refs uint64
	IID  ole.GUID
}

type {{.Name}}Callback func(instance *{{.Name}},{{- range .InParams -}}
	{{.GoVarName}} {{template "variabletype.tmpl" . }},
{{- end -}})

var callbacks{{.Name}} = &{{.Name | toLower}}CallbacksMap {
	mu:        &sync.Mutex{},
	callbacks: make(map[unsafe.Pointer]{{.Name}}Callback),
}

func New{{.Name}}(iid *ole.GUID, callback {{.Name}}Callback) *{{.Name}} {
	inst := (*{{.Name}})(C.malloc(C.size_t(unsafe.Sizeof({{.Name}}{}))))
	// Override all properties: the malloc may contain garbage
	inst.RawVTable = (*interface{})((unsafe.Pointer)(C.winrt_get{{.Name}}Vtbl()))
	inst.IID = *iid // copy contents
	inst.Mutex = sync.Mutex{}
	inst.refs = 0

	callbacks{{.Name}}.add(unsafe.Pointer(inst), callback)

	inst.addRef()
	return inst
}

// addRef increments the reference counter by one
func (r *{{.Name}}) addRef() uint64 {
	r.Lock()
	defer r.Unlock()
	r.refs++
	return r.refs
}

// removeRef decrements the reference counter by one. If it was already zero, it will just return zero.
func (r *{{.Name}}) removeRef() uint64 {
	r.Lock()
	defer r.Unlock()

	if r.refs > 0 {
		r.refs--
	}

	return r.refs
}

type {{.Name | toLower}}CallbacksMap struct {
	mu        *sync.Mutex
	callbacks map[unsafe.Pointer]{{.Name}}Callback
}

func (m *{{.Name | toLower}}CallbacksMap) add(p unsafe.Pointer, v {{.Name}}Callback) {
	m.mu.Lock()
	defer m.mu.Unlock()

	m.callbacks[p] = v
}

func (m *{{.Name | toLower}}CallbacksMap) get(p unsafe.Pointer) ({{.Name}}Callback, bool) {
	m.mu.Lock()
	defer m.mu.Unlock()

	v, ok := m.callbacks[p]
	return v, ok
}

func (m *{{.Name | toLower}}CallbacksMap) delete(p unsafe.Pointer) {
	m.mu.Lock()
	defer m.mu.Unlock()

	delete(m.callbacks, p)
}
